// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.0
// source: api.proto

package api

import (
	reflect "reflect"
	sync "sync"
)

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"

	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterConsumerGroupRequest_PullOptionMode int32

const (
	RegisterConsumerGroupRequest_Latest   RegisterConsumerGroupRequest_PullOptionMode = 0
	RegisterConsumerGroupRequest_Earliest RegisterConsumerGroupRequest_PullOptionMode = 3
)

// Enum value maps for RegisterConsumerGroupRequest_PullOptionMode.
var (
	RegisterConsumerGroupRequest_PullOptionMode_name = map[int32]string{
		0: "Latest",
		3: "Earliest",
	}
	RegisterConsumerGroupRequest_PullOptionMode_value = map[string]int32{
		"Latest":   0,
		"Earliest": 3,
	}
)

func (x RegisterConsumerGroupRequest_PullOptionMode) Enum() *RegisterConsumerGroupRequest_PullOptionMode {
	p := new(RegisterConsumerGroupRequest_PullOptionMode)
	*p = x
	return p
}

func (x RegisterConsumerGroupRequest_PullOptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterConsumerGroupRequest_PullOptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (RegisterConsumerGroupRequest_PullOptionMode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x RegisterConsumerGroupRequest_PullOptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterConsumerGroupRequest_PullOptionMode.Descriptor instead.
func (RegisterConsumerGroupRequest_PullOptionMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20, 0}
}

type Credentials_CredentialsIdentity int32

const (
	Credentials_Consumer      Credentials_CredentialsIdentity = 0
	Credentials_Producer      Credentials_CredentialsIdentity = 1
	Credentials_Broker        Credentials_CredentialsIdentity = 2
	Credentials_ConsumerGroup Credentials_CredentialsIdentity = 3
)

// Enum value maps for Credentials_CredentialsIdentity.
var (
	Credentials_CredentialsIdentity_name = map[int32]string{
		0: "Consumer",
		1: "Producer",
		2: "Broker",
		3: "ConsumerGroup",
	}
	Credentials_CredentialsIdentity_value = map[string]int32{
		"Consumer":      0,
		"Producer":      1,
		"Broker":        2,
		"ConsumerGroup": 3,
	}
)

func (x Credentials_CredentialsIdentity) Enum() *Credentials_CredentialsIdentity {
	p := new(Credentials_CredentialsIdentity)
	*p = x
	return p
}

func (x Credentials_CredentialsIdentity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Credentials_CredentialsIdentity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (Credentials_CredentialsIdentity) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x Credentials_CredentialsIdentity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Credentials_CredentialsIdentity.Descriptor instead.
func (Credentials_CredentialsIdentity) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22, 0}
}

type Response_Mode int32

const (
	Response_Unset                 Response_Mode = 0
	Response_Success               Response_Mode = 1
	Response_Failure               Response_Mode = 2
	Response_NotServe              Response_Mode = 3
	Response_ErrTimeout            Response_Mode = 4
	Response_ErrNeedToWait         Response_Mode = 5
	Response_ErrNotLeader          Response_Mode = 6
	Response_ErrSourceNotExist     Response_Mode = 7
	Response_ErrSourceAlreadyExist Response_Mode = 8
	Response_ErrPartitionChanged   Response_Mode = 9
	Response_ErrRequestIllegal     Response_Mode = 10
	Response_ErrSourceNotEnough    Response_Mode = 11
)

// Enum value maps for Response_Mode.
var (
	Response_Mode_name = map[int32]string{
		0:  "Unset",
		1:  "Success",
		2:  "Failure",
		3:  "NotServe",
		4:  "ErrTimeout",
		5:  "ErrNeedToWait",
		6:  "ErrNotLeader",
		7:  "ErrSourceNotExist",
		8:  "ErrSourceAlreadyExist",
		9:  "ErrPartitionChanged",
		10: "ErrRequestIllegal",
		11: "ErrSourceNotEnough",
	}
	Response_Mode_value = map[string]int32{
		"Unset":                 0,
		"Success":               1,
		"Failure":               2,
		"NotServe":              3,
		"ErrTimeout":            4,
		"ErrNeedToWait":         5,
		"ErrNotLeader":          6,
		"ErrSourceNotExist":     7,
		"ErrSourceAlreadyExist": 8,
		"ErrPartitionChanged":   9,
		"ErrRequestIllegal":     10,
		"ErrSourceNotEnough":    11,
	}
)

func (x Response_Mode) Enum() *Response_Mode {
	p := new(Response_Mode)
	*p = x
	return p
}

func (x Response_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (Response_Mode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x Response_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Mode.Descriptor instead.
func (Response_Mode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24, 0}
}

type RegisterBrokerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cred             *Credentials `protobuf:"bytes,5,opt,name=cred,proto3" json:"cred,omitempty"`
	IsMetadataNode   bool         `protobuf:"varint,1,opt,name=IsMetadataNode,proto3" json:"IsMetadataNode,omitempty"`
	ID               string       `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	MqServerUrl      string       `protobuf:"bytes,3,opt,name=MqServerUrl,proto3" json:"MqServerUrl,omitempty"`
	HeartBeatSession int64        `protobuf:"varint,4,opt,name=HeartBeatSession,proto3" json:"HeartBeatSession,omitempty"`
}

func (x *RegisterBrokerRequest) Reset() {
	*x = RegisterBrokerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterBrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBrokerRequest) ProtoMessage() {}

func (x *RegisterBrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBrokerRequest.ProtoReflect.Descriptor instead.
func (*RegisterBrokerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterBrokerRequest) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *RegisterBrokerRequest) GetIsMetadataNode() bool {
	if x != nil {
		return x.IsMetadataNode
	}
	return false
}

func (x *RegisterBrokerRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RegisterBrokerRequest) GetMqServerUrl() string {
	if x != nil {
		return x.MqServerUrl
	}
	return ""
}

func (x *RegisterBrokerRequest) GetHeartBeatSession() int64 {
	if x != nil {
		return x.HeartBeatSession
	}
	return 0
}

type RegisterBrokerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RegisterBrokerResponse) Reset() {
	*x = RegisterBrokerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterBrokerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBrokerResponse) ProtoMessage() {}

func (x *RegisterBrokerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBrokerResponse.ProtoReflect.Descriptor instead.
func (*RegisterBrokerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterBrokerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type HeartBeatResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response             *Response                  `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	ChangedTopic         *HeartBeatResponseDataTpKv `protobuf:"bytes,2,opt,name=ChangedTopic,proto3,oneof" json:"ChangedTopic,omitempty"`
	ChangedConsumerGroup *HeartBeatResponseDataCgKv `protobuf:"bytes,3,opt,name=ChangedConsumerGroup,proto3,oneof" json:"ChangedConsumerGroup,omitempty"`
}

func (x *HeartBeatResponseData) Reset() {
	*x = HeartBeatResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResponseData) ProtoMessage() {}

func (x *HeartBeatResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResponseData.ProtoReflect.Descriptor instead.
func (*HeartBeatResponseData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *HeartBeatResponseData) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HeartBeatResponseData) GetChangedTopic() *HeartBeatResponseDataTpKv {
	if x != nil {
		return x.ChangedTopic
	}
	return nil
}

func (x *HeartBeatResponseData) GetChangedConsumerGroup() *HeartBeatResponseDataCgKv {
	if x != nil {
		return x.ChangedConsumerGroup
	}
	return nil
}

type ConfirmIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self          *Credentials `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	CheckIdentity *Credentials `protobuf:"bytes,2,opt,name=CheckIdentity,proto3" json:"CheckIdentity,omitempty"`
}

func (x *ConfirmIdentityRequest) Reset() {
	*x = ConfirmIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmIdentityRequest) ProtoMessage() {}

func (x *ConfirmIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmIdentityRequest.ProtoReflect.Descriptor instead.
func (*ConfirmIdentityRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ConfirmIdentityRequest) GetSelf() *Credentials {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *ConfirmIdentityRequest) GetCheckIdentity() *Credentials {
	if x != nil {
		return x.CheckIdentity
	}
	return nil
}

type ConfirmIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ConfirmIdentityResponse) Reset() {
	*x = ConfirmIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmIdentityResponse) ProtoMessage() {}

func (x *ConfirmIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmIdentityResponse.ProtoReflect.Descriptor instead.
func (*ConfirmIdentityResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *ConfirmIdentityResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DisConnectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerInfo *Credentials `protobuf:"bytes,1,opt,name=BrokerInfo,proto3" json:"BrokerInfo,omitempty"`
	TargetInfo *Credentials `protobuf:"bytes,2,opt,name=TargetInfo,proto3" json:"TargetInfo,omitempty"`
}

func (x *DisConnectInfo) Reset() {
	*x = DisConnectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisConnectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisConnectInfo) ProtoMessage() {}

func (x *DisConnectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisConnectInfo.ProtoReflect.Descriptor instead.
func (*DisConnectInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *DisConnectInfo) GetBrokerInfo() *Credentials {
	if x != nil {
		return x.BrokerInfo
	}
	return nil
}

func (x *DisConnectInfo) GetTargetInfo() *Credentials {
	if x != nil {
		return x.TargetInfo
	}
	return nil
}

type AddPartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cred *Credentials `protobuf:"bytes,1,opt,name=Cred,proto3" json:"Cred,omitempty"`
	Part *Partition   `protobuf:"bytes,3,opt,name=part,proto3" json:"part,omitempty"`
}

func (x *AddPartRequest) Reset() {
	*x = AddPartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPartRequest) ProtoMessage() {}

func (x *AddPartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPartRequest.ProtoReflect.Descriptor instead.
func (*AddPartRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *AddPartRequest) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *AddPartRequest) GetPart() *Partition {
	if x != nil {
		return x.Part
	}
	return nil
}

type AddPartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *AddPartResponse) Reset() {
	*x = AddPartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPartResponse) ProtoMessage() {}

func (x *AddPartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPartResponse.ProtoReflect.Descriptor instead.
func (*AddPartResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *AddPartResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type RemovePartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cred  *Credentials `protobuf:"bytes,1,opt,name=Cred,proto3" json:"Cred,omitempty"`
	Topic string       `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Part  string       `protobuf:"bytes,3,opt,name=Part,proto3" json:"Part,omitempty"`
}

func (x *RemovePartRequest) Reset() {
	*x = RemovePartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartRequest) ProtoMessage() {}

func (x *RemovePartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartRequest.ProtoReflect.Descriptor instead.
func (*RemovePartRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *RemovePartRequest) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *RemovePartRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RemovePartRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

type RemovePartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RemovePartResponse) Reset() {
	*x = RemovePartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartResponse) ProtoMessage() {}

func (x *RemovePartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartResponse.ProtoReflect.Descriptor instead.
func (*RemovePartResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *RemovePartResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type SubscribeTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CGCred *Credentials `protobuf:"bytes,4,opt,name=CGCred,proto3" json:"CGCred,omitempty"`
	Tp     string       `protobuf:"bytes,3,opt,name=Tp,proto3" json:"Tp,omitempty"`
}

func (x *SubscribeTopicRequest) Reset() {
	*x = SubscribeTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTopicRequest) ProtoMessage() {}

func (x *SubscribeTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTopicRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTopicRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeTopicRequest) GetCGCred() *Credentials {
	if x != nil {
		return x.CGCred
	}
	return nil
}

func (x *SubscribeTopicRequest) GetTp() string {
	if x != nil {
		return x.Tp
	}
	return ""
}

type SubscribeTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SubscribeTopicResponse) Reset() {
	*x = SubscribeTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTopicResponse) ProtoMessage() {}

func (x *SubscribeTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTopicResponse.ProtoReflect.Descriptor instead.
func (*SubscribeTopicResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UnSubscribeTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CGCred *Credentials `protobuf:"bytes,4,opt,name=CGCred,proto3" json:"CGCred,omitempty"`
	Tp     string       `protobuf:"bytes,3,opt,name=Tp,proto3" json:"Tp,omitempty"`
}

func (x *UnSubscribeTopicRequest) Reset() {
	*x = UnSubscribeTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeTopicRequest) ProtoMessage() {}

func (x *UnSubscribeTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeTopicRequest.ProtoReflect.Descriptor instead.
func (*UnSubscribeTopicRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *UnSubscribeTopicRequest) GetCGCred() *Credentials {
	if x != nil {
		return x.CGCred
	}
	return nil
}

func (x *UnSubscribeTopicRequest) GetTp() string {
	if x != nil {
		return x.Tp
	}
	return ""
}

type UnSubscribeTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UnSubscribeTopicResponse) Reset() {
	*x = UnSubscribeTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeTopicResponse) ProtoMessage() {}

func (x *UnSubscribeTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeTopicResponse.ProtoReflect.Descriptor instead.
func (*UnSubscribeTopicResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *UnSubscribeTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// When the identity is a broker, all options are
// valid and all partition information is downloaded.
type CheckSourceTermResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response            *Response                                    `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	TopicTerm           int32                                        `protobuf:"varint,1,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
	GroupTerm           int32                                        `protobuf:"varint,2,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
	ConsumersData       *CheckSourceTermResponse_PartsData           `protobuf:"bytes,16,opt,name=ConsumersData,proto3,oneof" json:"ConsumersData,omitempty"`
	ConsumerGroupOption *RegisterConsumerGroupRequest_PullOptionMode `protobuf:"varint,13,opt,name=ConsumerGroupOption,proto3,enum=MqServer.RegisterConsumerGroupRequest_PullOptionMode,oneof" json:"ConsumerGroupOption,omitempty"`
	TopicData           *CheckSourceTermResponse_PartsData           `protobuf:"bytes,6,opt,name=TopicData,proto3,oneof" json:"TopicData,omitempty"`
}

func (x *CheckSourceTermResponse) Reset() {
	*x = CheckSourceTermResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermResponse) ProtoMessage() {}

func (x *CheckSourceTermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermResponse.ProtoReflect.Descriptor instead.
func (*CheckSourceTermResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *CheckSourceTermResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CheckSourceTermResponse) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

func (x *CheckSourceTermResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

func (x *CheckSourceTermResponse) GetConsumersData() *CheckSourceTermResponse_PartsData {
	if x != nil {
		return x.ConsumersData
	}
	return nil
}

func (x *CheckSourceTermResponse) GetConsumerGroupOption() RegisterConsumerGroupRequest_PullOptionMode {
	if x != nil && x.ConsumerGroupOption != nil {
		return *x.ConsumerGroupOption
	}
	return RegisterConsumerGroupRequest_Latest
}

func (x *CheckSourceTermResponse) GetTopicData() *CheckSourceTermResponse_PartsData {
	if x != nil {
		return x.TopicData
	}
	return nil
}

type CheckSourceTermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self         *Credentials                          `protobuf:"bytes,3,opt,name=Self,proto3" json:"Self,omitempty"`
	TopicData    *CheckSourceTermRequest_TopicCheck    `protobuf:"bytes,4,opt,name=TopicData,proto3,oneof" json:"TopicData,omitempty"`
	ConsumerData *CheckSourceTermRequest_ConsumerCheck `protobuf:"bytes,16,opt,name=ConsumerData,proto3,oneof" json:"ConsumerData,omitempty"`
}

func (x *CheckSourceTermRequest) Reset() {
	*x = CheckSourceTermRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermRequest) ProtoMessage() {}

func (x *CheckSourceTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermRequest.ProtoReflect.Descriptor instead.
func (*CheckSourceTermRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *CheckSourceTermRequest) GetSelf() *Credentials {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *CheckSourceTermRequest) GetTopicData() *CheckSourceTermRequest_TopicCheck {
	if x != nil {
		return x.TopicData
	}
	return nil
}

func (x *CheckSourceTermRequest) GetConsumerData() *CheckSourceTermRequest_ConsumerCheck {
	if x != nil {
		return x.ConsumerData
	}
	return nil
}

type LeaveConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCred    *Credentials `protobuf:"bytes,1,opt,name=GroupCred,proto3" json:"GroupCred,omitempty"`
	ConsumerCred *Credentials `protobuf:"bytes,2,opt,name=ConsumerCred,proto3" json:"ConsumerCred,omitempty"`
}

func (x *LeaveConsumerGroupRequest) Reset() {
	*x = LeaveConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveConsumerGroupRequest) ProtoMessage() {}

func (x *LeaveConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*LeaveConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *LeaveConsumerGroupRequest) GetGroupCred() *Credentials {
	if x != nil {
		return x.GroupCred
	}
	return nil
}

func (x *LeaveConsumerGroupRequest) GetConsumerCred() *Credentials {
	if x != nil {
		return x.ConsumerCred
	}
	return nil
}

type LeaveConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *LeaveConsumerGroupResponse) Reset() {
	*x = LeaveConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveConsumerGroupResponse) ProtoMessage() {}

func (x *LeaveConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*LeaveConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *LeaveConsumerGroupResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type JoinConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cred            *Credentials `protobuf:"bytes,1,opt,name=Cred,proto3" json:"Cred,omitempty"`
	ConsumerGroupId string       `protobuf:"bytes,2,opt,name=ConsumerGroupId,proto3" json:"ConsumerGroupId,omitempty"`
}

func (x *JoinConsumerGroupRequest) Reset() {
	*x = JoinConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinConsumerGroupRequest) ProtoMessage() {}

func (x *JoinConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*JoinConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *JoinConsumerGroupRequest) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *JoinConsumerGroupRequest) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

type JoinConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response  *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	FcParts   []*Partition `protobuf:"bytes,3,rep,name=FcParts,proto3" json:"FcParts,omitempty"`
	GroupTerm int32        `protobuf:"varint,4,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
}

func (x *JoinConsumerGroupResponse) Reset() {
	*x = JoinConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinConsumerGroupResponse) ProtoMessage() {}

func (x *JoinConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*JoinConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *JoinConsumerGroupResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *JoinConsumerGroupResponse) GetFcParts() []*Partition {
	if x != nil {
		return x.FcParts
	}
	return nil
}

func (x *JoinConsumerGroupResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

type RegisterConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullOption RegisterConsumerGroupRequest_PullOptionMode `protobuf:"varint,2,opt,name=PullOption,proto3,enum=MqServer.RegisterConsumerGroupRequest_PullOptionMode" json:"PullOption,omitempty"`
	GroupId    *string                                     `protobuf:"bytes,3,opt,name=GroupId,proto3,oneof" json:"GroupId,omitempty"`
}

func (x *RegisterConsumerGroupRequest) Reset() {
	*x = RegisterConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerGroupRequest) ProtoMessage() {}

func (x *RegisterConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*RegisterConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterConsumerGroupRequest) GetPullOption() RegisterConsumerGroupRequest_PullOptionMode {
	if x != nil {
		return x.PullOption
	}
	return RegisterConsumerGroupRequest_Latest
}

func (x *RegisterConsumerGroupRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type RegisterConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response  *Response    `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	GroupTerm int32        `protobuf:"varint,4,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
	Cred      *Credentials `protobuf:"bytes,1,opt,name=Cred,proto3" json:"Cred,omitempty"`
}

func (x *RegisterConsumerGroupResponse) Reset() {
	*x = RegisterConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerGroupResponse) ProtoMessage() {}

func (x *RegisterConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*RegisterConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterConsumerGroupResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterConsumerGroupResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

func (x *RegisterConsumerGroupResponse) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

// [Credentials] find the corresponding Consumer by this field
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity Credentials_CredentialsIdentity `protobuf:"varint,1,opt,name=Identity,proto3,enum=MqServer.Credentials_CredentialsIdentity" json:"Identity,omitempty"`
	Id       string                          `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Key      string                          `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *Credentials) GetIdentity() Credentials_CredentialsIdentity {
	if x != nil {
		return x.Identity
	}
	return Credentials_Consumer
}

func (x *Credentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Credentials) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type MQHeartBeatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerData         *Credentials         `protobuf:"bytes,1,opt,name=BrokerData,proto3" json:"BrokerData,omitempty"`
	CheckTopic         *MQHeartBeatDataTpKv `protobuf:"bytes,2,opt,name=CheckTopic,proto3,oneof" json:"CheckTopic,omitempty"`
	CheckConsumerGroup *MQHeartBeatDataCgKv `protobuf:"bytes,3,opt,name=CheckConsumerGroup,proto3,oneof" json:"CheckConsumerGroup,omitempty"`
}

func (x *MQHeartBeatData) Reset() {
	*x = MQHeartBeatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQHeartBeatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQHeartBeatData) ProtoMessage() {}

func (x *MQHeartBeatData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQHeartBeatData.ProtoReflect.Descriptor instead.
func (*MQHeartBeatData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *MQHeartBeatData) GetBrokerData() *Credentials {
	if x != nil {
		return x.BrokerData
	}
	return nil
}

func (x *MQHeartBeatData) GetCheckTopic() *MQHeartBeatDataTpKv {
	if x != nil {
		return x.CheckTopic
	}
	return nil
}

func (x *MQHeartBeatData) GetCheckConsumerGroup() *MQHeartBeatDataCgKv {
	if x != nil {
		return x.CheckConsumerGroup
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Response_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=MqServer.Response_Mode" json:"mode,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *Response) GetMode() Response_Mode {
	if x != nil {
		return x.Mode
	}
	return Response_Unset
}

type RegisterConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxReturnMessageSize    int32 `protobuf:"varint,3,opt,name=MaxReturnMessageSize,proto3" json:"MaxReturnMessageSize,omitempty"`
	MaxReturnMessageEntries int32 `protobuf:"varint,1,opt,name=MaxReturnMessageEntries,proto3" json:"MaxReturnMessageEntries,omitempty"`
	TimeoutSessionMsec      int32 `protobuf:"varint,4,opt,name=timeoutSessionMsec,proto3" json:"timeoutSessionMsec,omitempty"`
}

func (x *RegisterConsumerRequest) Reset() {
	*x = RegisterConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerRequest) ProtoMessage() {}

func (x *RegisterConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerRequest.ProtoReflect.Descriptor instead.
func (*RegisterConsumerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *RegisterConsumerRequest) GetMaxReturnMessageSize() int32 {
	if x != nil {
		return x.MaxReturnMessageSize
	}
	return 0
}

func (x *RegisterConsumerRequest) GetMaxReturnMessageEntries() int32 {
	if x != nil {
		return x.MaxReturnMessageEntries
	}
	return 0
}

func (x *RegisterConsumerRequest) GetTimeoutSessionMsec() int32 {
	if x != nil {
		return x.TimeoutSessionMsec
	}
	return 0
}

type BrokerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *BrokerData) Reset() {
	*x = BrokerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerData) ProtoMessage() {}

func (x *BrokerData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerData.ProtoReflect.Descriptor instead.
func (*BrokerData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *BrokerData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BrokerData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string       `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	TpTerm int32        `protobuf:"varint,2,opt,name=TpTerm,proto3" json:"TpTerm,omitempty"`
	Parts  []*Partition `protobuf:"bytes,3,rep,name=Parts,proto3" json:"Parts,omitempty"`
}

func (x *TpData) Reset() {
	*x = TpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpData) ProtoMessage() {}

func (x *TpData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpData.ProtoReflect.Descriptor instead.
func (*TpData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *TpData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TpData) GetTpTerm() int32 {
	if x != nil {
		return x.TpTerm
	}
	return 0
}

func (x *TpData) GetParts() []*Partition {
	if x != nil {
		return x.Parts
	}
	return nil
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic    string        `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	PartName string        `protobuf:"bytes,2,opt,name=PartName,proto3" json:"PartName,omitempty"`
	Brokers  []*BrokerData `protobuf:"bytes,3,rep,name=Brokers,proto3" json:"Brokers,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *Partition) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Partition) GetPartName() string {
	if x != nil {
		return x.PartName
	}
	return ""
}

func (x *Partition) GetBrokers() []*BrokerData {
	if x != nil {
		return x.Brokers
	}
	return nil
}

type RegisterConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Credential *Credentials `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
}

func (x *RegisterConsumerResponse) Reset() {
	*x = RegisterConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerResponse) ProtoMessage() {}

func (x *RegisterConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerResponse.ProtoReflect.Descriptor instead.
func (*RegisterConsumerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *RegisterConsumerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterConsumerResponse) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

type RegisterProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FocalTopic         string `protobuf:"bytes,1,opt,name=FocalTopic,proto3" json:"FocalTopic,omitempty"`
	MaxPushMessageSize int32  `protobuf:"varint,3,opt,name=MaxPushMessageSize,proto3" json:"MaxPushMessageSize,omitempty"`
}

func (x *RegisterProducerRequest) Reset() {
	*x = RegisterProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProducerRequest) ProtoMessage() {}

func (x *RegisterProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProducerRequest.ProtoReflect.Descriptor instead.
func (*RegisterProducerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *RegisterProducerRequest) GetFocalTopic() string {
	if x != nil {
		return x.FocalTopic
	}
	return ""
}

func (x *RegisterProducerRequest) GetMaxPushMessageSize() int32 {
	if x != nil {
		return x.MaxPushMessageSize
	}
	return 0
}

type RegisterProducerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response              *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Credential            *Credentials `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
	TpData                *TpData      `protobuf:"bytes,3,opt,name=tpData,proto3" json:"tpData,omitempty"`
	AllowPushMessageSize  int32        `protobuf:"varint,4,opt,name=AllowPushMessageSize,proto3" json:"AllowPushMessageSize,omitempty"`
	AllowPushMessageCount int32        `protobuf:"varint,5,opt,name=AllowPushMessageCount,proto3" json:"AllowPushMessageCount,omitempty"`
}

func (x *RegisterProducerResponse) Reset() {
	*x = RegisterProducerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProducerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProducerResponse) ProtoMessage() {}

func (x *RegisterProducerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProducerResponse.ProtoReflect.Descriptor instead.
func (*RegisterProducerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterProducerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterProducerResponse) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *RegisterProducerResponse) GetTpData() *TpData {
	if x != nil {
		return x.TpData
	}
	return nil
}

func (x *RegisterProducerResponse) GetAllowPushMessageSize() int32 {
	if x != nil {
		return x.AllowPushMessageSize
	}
	return 0
}

func (x *RegisterProducerResponse) GetAllowPushMessageCount() int32 {
	if x != nil {
		return x.AllowPushMessageCount
	}
	return 0
}

type CreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string                                       `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Partition []*CreateTopicRequest_PartitionCreateDetails `protobuf:"bytes,3,rep,name=Partition,proto3" json:"Partition,omitempty"`
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

func (x *CreateTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CreateTopicRequest) GetPartition() []*CreateTopicRequest_PartitionCreateDetails {
	if x != nil {
		return x.Partition
	}
	return nil
}

type CreateTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Tp       *TpData   `protobuf:"bytes,2,opt,name=tp,proto3" json:"tp,omitempty"`
}

func (x *CreateTopicResponse) Reset() {
	*x = CreateTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResponse) ProtoMessage() {}

func (x *CreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

func (x *CreateTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateTopicResponse) GetTp() *TpData {
	if x != nil {
		return x.Tp
	}
	return nil
}

type QueryTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	Topic      string       `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
}

func (x *QueryTopicRequest) Reset() {
	*x = QueryTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicRequest) ProtoMessage() {}

func (x *QueryTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicRequest.ProtoReflect.Descriptor instead.
func (*QueryTopicRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

func (x *QueryTopicRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *QueryTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type QueryTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	PartitionDetails []*Partition `protobuf:"bytes,2,rep,name=PartitionDetails,proto3" json:"PartitionDetails,omitempty"`
	TopicTerm        int32        `protobuf:"varint,3,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
}

func (x *QueryTopicResponse) Reset() {
	*x = QueryTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicResponse) ProtoMessage() {}

func (x *QueryTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicResponse.ProtoReflect.Descriptor instead.
func (*QueryTopicResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *QueryTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *QueryTopicResponse) GetPartitionDetails() []*Partition {
	if x != nil {
		return x.PartitionDetails
	}
	return nil
}

func (x *QueryTopicResponse) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

type UnRegisterConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *UnRegisterConsumerRequest) Reset() {
	*x = UnRegisterConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterConsumerRequest) ProtoMessage() {}

func (x *UnRegisterConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterConsumerRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterConsumerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

func (x *UnRegisterConsumerRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

type UnRegisterConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UnRegisterConsumerResponse) Reset() {
	*x = UnRegisterConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterConsumerResponse) ProtoMessage() {}

func (x *UnRegisterConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterConsumerResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterConsumerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *UnRegisterConsumerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UnRegisterProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *UnRegisterProducerRequest) Reset() {
	*x = UnRegisterProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterProducerRequest) ProtoMessage() {}

func (x *UnRegisterProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterProducerRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterProducerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

func (x *UnRegisterProducerRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

type UnRegisterProducerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UnRegisterProducerResponse) Reset() {
	*x = UnRegisterProducerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterProducerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterProducerResponse) ProtoMessage() {}

func (x *UnRegisterProducerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterProducerResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterProducerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

func (x *UnRegisterProducerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message [][]byte `protobuf:"bytes,1,rep,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

func (x *Message) GetMessage() [][]byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PushMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Topic      string       `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Part       string       `protobuf:"bytes,5,opt,name=part,proto3" json:"part,omitempty"`
	Msgs       *Message     `protobuf:"bytes,2,opt,name=Msgs,proto3" json:"Msgs,omitempty"`
	TopicTerm  int32        `protobuf:"varint,3,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
}

func (x *PushMessageRequest) Reset() {
	*x = PushMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessageRequest) ProtoMessage() {}

func (x *PushMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessageRequest.ProtoReflect.Descriptor instead.
func (*PushMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

func (x *PushMessageRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *PushMessageRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PushMessageRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *PushMessageRequest) GetMsgs() *Message {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *PushMessageRequest) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

type PushMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PushMessageResponse) Reset() {
	*x = PushMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessageResponse) ProtoMessage() {}

func (x *PushMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessageResponse.ProtoReflect.Descriptor instead.
func (*PushMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *PushMessageResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type PullMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *Credentials `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Self           *Credentials `protobuf:"bytes,3,opt,name=Self,proto3" json:"Self,omitempty"`
	GroupTerm      int32        `protobuf:"varint,6,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
	LastTimeOffset int64        `protobuf:"varint,7,opt,name=LastTimeOffset,proto3" json:"LastTimeOffset,omitempty"`
	ReadEntryNum   int32        `protobuf:"varint,8,opt,name=ReadEntryNum,proto3" json:"ReadEntryNum,omitempty"` // could == 0
	Topic          string       `protobuf:"bytes,4,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Part           string       `protobuf:"bytes,5,opt,name=Part,proto3" json:"Part,omitempty"`
}

func (x *PullMessageRequest) Reset() {
	*x = PullMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMessageRequest) ProtoMessage() {}

func (x *PullMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMessageRequest.ProtoReflect.Descriptor instead.
func (*PullMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

func (x *PullMessageRequest) GetGroup() *Credentials {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *PullMessageRequest) GetSelf() *Credentials {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *PullMessageRequest) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

func (x *PullMessageRequest) GetLastTimeOffset() int64 {
	if x != nil {
		return x.LastTimeOffset
	}
	return 0
}

func (x *PullMessageRequest) GetReadEntryNum() int32 {
	if x != nil {
		return x.ReadEntryNum
	}
	return 0
}

func (x *PullMessageRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PullMessageRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

// to keep consumer alive
type PullMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	MessageOffset int64     `protobuf:"varint,3,opt,name=MessageOffset,proto3" json:"MessageOffset,omitempty"`
	Msgs          *Message  `protobuf:"bytes,2,opt,name=Msgs,proto3" json:"Msgs,omitempty"`
	// Use when ConsumerChange [commit Last] Or PartDel
	IsCouldToDel bool `protobuf:"varint,6,opt,name=IsCouldToDel,proto3" json:"IsCouldToDel,omitempty"`
}

func (x *PullMessageResponse) Reset() {
	*x = PullMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMessageResponse) ProtoMessage() {}

func (x *PullMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMessageResponse.ProtoReflect.Descriptor instead.
func (*PullMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *PullMessageResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PullMessageResponse) GetMessageOffset() int64 {
	if x != nil {
		return x.MessageOffset
	}
	return 0
}

func (x *PullMessageResponse) GetMsgs() *Message {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *PullMessageResponse) GetIsCouldToDel() bool {
	if x != nil {
		return x.IsCouldToDel
	}
	return false
}

type HeartBeatResponseDataTpKv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicTerm map[string]int32 `protobuf:"bytes,1,rep,name=TopicTerm,proto3" json:"TopicTerm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *HeartBeatResponseDataTpKv) Reset() {
	*x = HeartBeatResponseDataTpKv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResponseDataTpKv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResponseDataTpKv) ProtoMessage() {}

func (x *HeartBeatResponseDataTpKv) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResponseDataTpKv.ProtoReflect.Descriptor instead.
func (*HeartBeatResponseDataTpKv) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *HeartBeatResponseDataTpKv) GetTopicTerm() map[string]int32 {
	if x != nil {
		return x.TopicTerm
	}
	return nil
}

type HeartBeatResponseDataCgKv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedGroup map[string]int32 `protobuf:"bytes,1,rep,name=changedGroup,proto3" json:"changedGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *HeartBeatResponseDataCgKv) Reset() {
	*x = HeartBeatResponseDataCgKv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResponseDataCgKv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResponseDataCgKv) ProtoMessage() {}

func (x *HeartBeatResponseDataCgKv) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResponseDataCgKv.ProtoReflect.Descriptor instead.
func (*HeartBeatResponseDataCgKv) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 1}
}

func (x *HeartBeatResponseDataCgKv) GetChangedGroup() map[string]int32 {
	if x != nil {
		return x.ChangedGroup
	}
	return nil
}

type CheckSourceTermResponse_IDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID []string `protobuf:"bytes,1,rep,name=ID,proto3" json:"ID,omitempty"`
}

func (x *CheckSourceTermResponse_IDs) Reset() {
	*x = CheckSourceTermResponse_IDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermResponse_IDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermResponse_IDs) ProtoMessage() {}

func (x *CheckSourceTermResponse_IDs) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermResponse_IDs.ProtoReflect.Descriptor instead.
func (*CheckSourceTermResponse_IDs) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CheckSourceTermResponse_IDs) GetID() []string {
	if x != nil {
		return x.ID
	}
	return nil
}

type CheckSourceTermResponse_PartsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FcParts                  []*CheckSourceTermResponse_PartsData_Parts `protobuf:"bytes,3,rep,name=FcParts,proto3" json:"FcParts,omitempty"`
	FollowerProducerIDs      *CheckSourceTermResponse_IDs               `protobuf:"bytes,2,opt,name=FollowerProducerIDs,proto3,oneof" json:"FollowerProducerIDs,omitempty"`
	FollowerConsumerGroupIDs *CheckSourceTermResponse_IDs               `protobuf:"bytes,1,opt,name=FollowerConsumerGroupIDs,proto3,oneof" json:"FollowerConsumerGroupIDs,omitempty"` // TO Del ？
}

func (x *CheckSourceTermResponse_PartsData) Reset() {
	*x = CheckSourceTermResponse_PartsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermResponse_PartsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermResponse_PartsData) ProtoMessage() {}

func (x *CheckSourceTermResponse_PartsData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermResponse_PartsData.ProtoReflect.Descriptor instead.
func (*CheckSourceTermResponse_PartsData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14, 1}
}

func (x *CheckSourceTermResponse_PartsData) GetFcParts() []*CheckSourceTermResponse_PartsData_Parts {
	if x != nil {
		return x.FcParts
	}
	return nil
}

func (x *CheckSourceTermResponse_PartsData) GetFollowerProducerIDs() *CheckSourceTermResponse_IDs {
	if x != nil {
		return x.FollowerProducerIDs
	}
	return nil
}

func (x *CheckSourceTermResponse_PartsData) GetFollowerConsumerGroupIDs() *CheckSourceTermResponse_IDs {
	if x != nil {
		return x.FollowerConsumerGroupIDs
	}
	return nil
}

type CheckSourceTermResponse_PartsData_Parts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Part                            *Partition `protobuf:"bytes,3,opt,name=Part,proto3" json:"Part,omitempty"`
	ConsumerID                      *string    `protobuf:"bytes,1,opt,name=ConsumerID,proto3,oneof" json:"ConsumerID,omitempty"`
	ConsumerTimeoutSession          *int32     `protobuf:"varint,11,opt,name=ConsumerTimeoutSession,proto3,oneof" json:"ConsumerTimeoutSession,omitempty"`
	ConsumerMaxReturnMessageSize    *int32     `protobuf:"varint,12,opt,name=ConsumerMaxReturnMessageSize,proto3,oneof" json:"ConsumerMaxReturnMessageSize,omitempty"`
	ConsumerMaxReturnMessageEntries *int32     `protobuf:"varint,10,opt,name=ConsumerMaxReturnMessageEntries,proto3,oneof" json:"ConsumerMaxReturnMessageEntries,omitempty"`
}

func (x *CheckSourceTermResponse_PartsData_Parts) Reset() {
	*x = CheckSourceTermResponse_PartsData_Parts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermResponse_PartsData_Parts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermResponse_PartsData_Parts) ProtoMessage() {}

func (x *CheckSourceTermResponse_PartsData_Parts) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermResponse_PartsData_Parts.ProtoReflect.Descriptor instead.
func (*CheckSourceTermResponse_PartsData_Parts) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14, 1, 0}
}

func (x *CheckSourceTermResponse_PartsData_Parts) GetPart() *Partition {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *CheckSourceTermResponse_PartsData_Parts) GetConsumerID() string {
	if x != nil && x.ConsumerID != nil {
		return *x.ConsumerID
	}
	return ""
}

func (x *CheckSourceTermResponse_PartsData_Parts) GetConsumerTimeoutSession() int32 {
	if x != nil && x.ConsumerTimeoutSession != nil {
		return *x.ConsumerTimeoutSession
	}
	return 0
}

func (x *CheckSourceTermResponse_PartsData_Parts) GetConsumerMaxReturnMessageSize() int32 {
	if x != nil && x.ConsumerMaxReturnMessageSize != nil {
		return *x.ConsumerMaxReturnMessageSize
	}
	return 0
}

func (x *CheckSourceTermResponse_PartsData_Parts) GetConsumerMaxReturnMessageEntries() int32 {
	if x != nil && x.ConsumerMaxReturnMessageEntries != nil {
		return *x.ConsumerMaxReturnMessageEntries
	}
	return 0
}

type CheckSourceTermRequest_TopicCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	TopicTerm int32  `protobuf:"varint,1,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
}

func (x *CheckSourceTermRequest_TopicCheck) Reset() {
	*x = CheckSourceTermRequest_TopicCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermRequest_TopicCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermRequest_TopicCheck) ProtoMessage() {}

func (x *CheckSourceTermRequest_TopicCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermRequest_TopicCheck.ProtoReflect.Descriptor instead.
func (*CheckSourceTermRequest_TopicCheck) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CheckSourceTermRequest_TopicCheck) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CheckSourceTermRequest_TopicCheck) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

type CheckSourceTermRequest_ConsumerCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId *string `protobuf:"bytes,13,opt,name=ConsumerId,proto3,oneof" json:"ConsumerId,omitempty"`
	GroupID    string  `protobuf:"bytes,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupTerm  int32   `protobuf:"varint,2,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
}

func (x *CheckSourceTermRequest_ConsumerCheck) Reset() {
	*x = CheckSourceTermRequest_ConsumerCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermRequest_ConsumerCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermRequest_ConsumerCheck) ProtoMessage() {}

func (x *CheckSourceTermRequest_ConsumerCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermRequest_ConsumerCheck.ProtoReflect.Descriptor instead.
func (*CheckSourceTermRequest_ConsumerCheck) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CheckSourceTermRequest_ConsumerCheck) GetConsumerId() string {
	if x != nil && x.ConsumerId != nil {
		return *x.ConsumerId
	}
	return ""
}

func (x *CheckSourceTermRequest_ConsumerCheck) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CheckSourceTermRequest_ConsumerCheck) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

type MQHeartBeatDataTpKv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicTerm map[string]int32 `protobuf:"bytes,1,rep,name=TopicTerm,proto3" json:"TopicTerm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MQHeartBeatDataTpKv) Reset() {
	*x = MQHeartBeatDataTpKv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQHeartBeatDataTpKv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQHeartBeatDataTpKv) ProtoMessage() {}

func (x *MQHeartBeatDataTpKv) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQHeartBeatDataTpKv.ProtoReflect.Descriptor instead.
func (*MQHeartBeatDataTpKv) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23, 0}
}

func (x *MQHeartBeatDataTpKv) GetTopicTerm() map[string]int32 {
	if x != nil {
		return x.TopicTerm
	}
	return nil
}

type MQHeartBeatDataCgKv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroup map[string]int32 `protobuf:"bytes,1,rep,name=ConsumerGroup,proto3" json:"ConsumerGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MQHeartBeatDataCgKv) Reset() {
	*x = MQHeartBeatDataCgKv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQHeartBeatDataCgKv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQHeartBeatDataCgKv) ProtoMessage() {}

func (x *MQHeartBeatDataCgKv) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQHeartBeatDataCgKv.ProtoReflect.Descriptor instead.
func (*MQHeartBeatDataCgKv) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23, 1}
}

func (x *MQHeartBeatDataCgKv) GetConsumerGroup() map[string]int32 {
	if x != nil {
		return x.ConsumerGroup
	}
	return nil
}

type CreateTopicRequest_PartitionCreateDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionName     string `protobuf:"bytes,1,opt,name=PartitionName,proto3" json:"PartitionName,omitempty"`
	ReplicationNumber int32  `protobuf:"varint,2,opt,name=ReplicationNumber,proto3" json:"ReplicationNumber,omitempty"`
}

func (x *CreateTopicRequest_PartitionCreateDetails) Reset() {
	*x = CreateTopicRequest_PartitionCreateDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest_PartitionCreateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest_PartitionCreateDetails) ProtoMessage() {}

func (x *CreateTopicRequest_PartitionCreateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest_PartitionCreateDetails.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest_PartitionCreateDetails) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32, 0}
}

func (x *CreateTopicRequest_PartitionCreateDetails) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

func (x *CreateTopicRequest_PartitionCreateDetails) GetReplicationNumber() int32 {
	if x != nil {
		return x.ReplicationNumber
	}
	return 0
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x63, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x63, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x48, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x04, 0x0a, 0x15, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x70, 0x4b, 0x76,
	0x48, 0x00, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x63, 0x67, 0x4b, 0x76, 0x48, 0x01, 0x52, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x1a, 0x97, 0x01, 0x0a, 0x04, 0x74, 0x70, 0x4b, 0x76, 0x12, 0x51, 0x0a, 0x09, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x70, 0x4b, 0x76, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x1a, 0x3c,
	0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa3, 0x01, 0x0a,
	0x04, 0x63, 0x67, 0x4b, 0x76, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x67, 0x4b,
	0x76, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x80, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x49, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x04, 0x43, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74,
	0x22, 0x41, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x43, 0x72, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x43,
	0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x72, 0x74, 0x22, 0x44, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x43, 0x47, 0x43, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x06, 0x43, 0x47, 0x43, 0x72, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x54,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x70, 0x22, 0x48, 0x0a, 0x16, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x17, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x43, 0x47, 0x43, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x06, 0x43, 0x47, 0x43, 0x72, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x70, 0x22,
	0x4a, 0x0a, 0x18, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x09, 0x0a, 0x17,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x65, 0x72, 0x6d, 0x12, 0x56, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x01, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x09, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x15, 0x0a, 0x03, 0x49, 0x44, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x1a, 0xef, 0x05, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b,
	0x0a, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x48,
	0x00, 0x52, 0x13, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x18, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x44, 0x73, 0x48, 0x01, 0x52, 0x18, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x99, 0x03, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x50,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x50, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x1c,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x1f, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0xca, 0x03, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x66,
	0x12, 0x4e, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x01, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x40, 0x0a, 0x0a, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x1a, 0x7b, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x18, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x43, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x22,
	0xcc, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x55, 0x0a, 0x0a, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x50, 0x75, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x22, 0x2a, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74,
	0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x98,
	0x01, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x29,
	0x0a, 0x04, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x04, 0x43, 0x72, 0x65, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x03, 0x22, 0xc0, 0x04, 0x0a, 0x0f, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x51, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x70, 0x4b, 0x76, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x51, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x67, 0x4b, 0x76,
	0x48, 0x01, 0x52, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x91, 0x01, 0x0a, 0x04, 0x74, 0x70,
	0x4b, 0x76, 0x12, 0x4b, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x70, 0x4b, 0x76, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x1a,
	0x3c, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa1, 0x01,
	0x0a, 0x04, 0x63, 0x67, 0x4b, 0x76, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x67, 0x4b, 0x76, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a,
	0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0xe8, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e,
	0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x72, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x72, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x09, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x72, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6c, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x0b, 0x22, 0xb7, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x22, 0x2e, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x61, 0x0a, 0x06, 0x54, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x70, 0x54, 0x65, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x29,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x69, 0x0a, 0x17,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x63, 0x61, 0x6c,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x74,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xeb, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x6c, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x67, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x02, 0x74, 0x70, 0x22, 0x60, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x52,
	0x0a, 0x19, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x1a, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x19, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x1a, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54,
	0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x65, 0x72, 0x6d, 0x22, 0x45, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x12,
	0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x29, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x72, 0x74, 0x22, 0xb6,
	0x01, 0x0a, 0x13, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x04,
	0x4d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x4d,
	0x73, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x6f,
	0x44, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x75,
	0x6c, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x32, 0xbb, 0x0f, 0x0a, 0x0c, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x20,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x26, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x1b, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1b,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x55, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x23,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x09, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x1f, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x18, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0c, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x51, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_api_proto_goTypes = []interface{}{
	(RegisterConsumerGroupRequest_PullOptionMode)(0),  // 0: MqServer.RegisterConsumerGroupRequest.PullOptionMode
	(Credentials_CredentialsIdentity)(0),              // 1: MqServer.Credentials.CredentialsIdentity
	(Response_Mode)(0),                                // 2: MqServer.Response.Mode
	(*RegisterBrokerRequest)(nil),                     // 3: MqServer.RegisterBrokerRequest
	(*RegisterBrokerResponse)(nil),                    // 4: MqServer.RegisterBrokerResponse
	(*HeartBeatResponseData)(nil),                     // 5: MqServer.HeartBeatResponseData
	(*ConfirmIdentityRequest)(nil),                    // 6: MqServer.ConfirmIdentityRequest
	(*ConfirmIdentityResponse)(nil),                   // 7: MqServer.ConfirmIdentityResponse
	(*DisConnectInfo)(nil),                            // 8: MqServer.DisConnectInfo
	(*AddPartRequest)(nil),                            // 9: MqServer.AddPartRequest
	(*AddPartResponse)(nil),                           // 10: MqServer.AddPartResponse
	(*RemovePartRequest)(nil),                         // 11: MqServer.RemovePartRequest
	(*RemovePartResponse)(nil),                        // 12: MqServer.RemovePartResponse
	(*SubscribeTopicRequest)(nil),                     // 13: MqServer.SubscribeTopicRequest
	(*SubscribeTopicResponse)(nil),                    // 14: MqServer.SubscribeTopicResponse
	(*UnSubscribeTopicRequest)(nil),                   // 15: MqServer.UnSubscribeTopicRequest
	(*UnSubscribeTopicResponse)(nil),                  // 16: MqServer.UnSubscribeTopicResponse
	(*CheckSourceTermResponse)(nil),                   // 17: MqServer.CheckSourceTermResponse
	(*CheckSourceTermRequest)(nil),                    // 18: MqServer.CheckSourceTermRequest
	(*LeaveConsumerGroupRequest)(nil),                 // 19: MqServer.LeaveConsumerGroupRequest
	(*LeaveConsumerGroupResponse)(nil),                // 20: MqServer.LeaveConsumerGroupResponse
	(*JoinConsumerGroupRequest)(nil),                  // 21: MqServer.JoinConsumerGroupRequest
	(*JoinConsumerGroupResponse)(nil),                 // 22: MqServer.JoinConsumerGroupResponse
	(*RegisterConsumerGroupRequest)(nil),              // 23: MqServer.RegisterConsumerGroupRequest
	(*RegisterConsumerGroupResponse)(nil),             // 24: MqServer.RegisterConsumerGroupResponse
	(*Credentials)(nil),                               // 25: MqServer.Credentials
	(*MQHeartBeatData)(nil),                           // 26: MqServer.MQHeartBeatData
	(*Response)(nil),                                  // 27: MqServer.Response
	(*RegisterConsumerRequest)(nil),                   // 28: MqServer.RegisterConsumerRequest
	(*BrokerData)(nil),                                // 29: MqServer.BrokerData
	(*TpData)(nil),                                    // 30: MqServer.TpData
	(*Partition)(nil),                                 // 31: MqServer.Partition
	(*RegisterConsumerResponse)(nil),                  // 32: MqServer.RegisterConsumerResponse
	(*RegisterProducerRequest)(nil),                   // 33: MqServer.RegisterProducerRequest
	(*RegisterProducerResponse)(nil),                  // 34: MqServer.RegisterProducerResponse
	(*CreateTopicRequest)(nil),                        // 35: MqServer.CreateTopicRequest
	(*CreateTopicResponse)(nil),                       // 36: MqServer.CreateTopicResponse
	(*QueryTopicRequest)(nil),                         // 37: MqServer.QueryTopicRequest
	(*QueryTopicResponse)(nil),                        // 38: MqServer.QueryTopicResponse
	(*UnRegisterConsumerRequest)(nil),                 // 39: MqServer.UnRegisterConsumerRequest
	(*UnRegisterConsumerResponse)(nil),                // 40: MqServer.UnRegisterConsumerResponse
	(*UnRegisterProducerRequest)(nil),                 // 41: MqServer.UnRegisterProducerRequest
	(*UnRegisterProducerResponse)(nil),                // 42: MqServer.UnRegisterProducerResponse
	(*Message)(nil),                                   // 43: MqServer.Message
	(*PushMessageRequest)(nil),                        // 44: MqServer.PushMessageRequest
	(*PushMessageResponse)(nil),                       // 45: MqServer.PushMessageResponse
	(*PullMessageRequest)(nil),                        // 46: MqServer.PullMessageRequest
	(*PullMessageResponse)(nil),                       // 47: MqServer.PullMessageResponse
	(*HeartBeatResponseDataTpKv)(nil),                 // 48: MqServer.HeartBeatResponseData.tpKv
	(*HeartBeatResponseDataCgKv)(nil),                 // 49: MqServer.HeartBeatResponseData.cgKv
	nil,                                               // 50: MqServer.HeartBeatResponseData.tpKv.TopicTermEntry
	nil,                                               // 51: MqServer.HeartBeatResponseData.cgKv.ChangedGroupEntry
	(*CheckSourceTermResponse_IDs)(nil),               // 52: MqServer.CheckSourceTermResponse.IDs
	(*CheckSourceTermResponse_PartsData)(nil),         // 53: MqServer.CheckSourceTermResponse.PartsData
	(*CheckSourceTermResponse_PartsData_Parts)(nil),   // 54: MqServer.CheckSourceTermResponse.PartsData.Parts
	(*CheckSourceTermRequest_TopicCheck)(nil),         // 55: MqServer.CheckSourceTermRequest.TopicCheck
	(*CheckSourceTermRequest_ConsumerCheck)(nil),      // 56: MqServer.CheckSourceTermRequest.ConsumerCheck
	(*MQHeartBeatDataTpKv)(nil),                       // 57: MqServer.MQHeartBeatData.tpKv
	(*MQHeartBeatDataCgKv)(nil),                       // 58: MqServer.MQHeartBeatData.cgKv
	nil,                                               // 59: MqServer.MQHeartBeatData.tpKv.TopicTermEntry
	nil,                                               // 60: MqServer.MQHeartBeatData.cgKv.ConsumerGroupEntry
	(*CreateTopicRequest_PartitionCreateDetails)(nil), // 61: MqServer.CreateTopicRequest.PartitionCreateDetails
}
var file_api_proto_depIdxs = []int32{
	25, // 0: MqServer.RegisterBrokerRequest.cred:type_name -> MqServer.Credentials
	27, // 1: MqServer.RegisterBrokerResponse.response:type_name -> MqServer.Response
	27, // 2: MqServer.HeartBeatResponseData.response:type_name -> MqServer.Response
	48, // 3: MqServer.HeartBeatResponseData.ChangedTopic:type_name -> MqServer.HeartBeatResponseData.tpKv
	49, // 4: MqServer.HeartBeatResponseData.ChangedConsumerGroup:type_name -> MqServer.HeartBeatResponseData.cgKv
	25, // 5: MqServer.ConfirmIdentityRequest.self:type_name -> MqServer.Credentials
	25, // 6: MqServer.ConfirmIdentityRequest.CheckIdentity:type_name -> MqServer.Credentials
	27, // 7: MqServer.ConfirmIdentityResponse.response:type_name -> MqServer.Response
	25, // 8: MqServer.DisConnectInfo.BrokerInfo:type_name -> MqServer.Credentials
	25, // 9: MqServer.DisConnectInfo.TargetInfo:type_name -> MqServer.Credentials
	25, // 10: MqServer.AddPartRequest.Cred:type_name -> MqServer.Credentials
	31, // 11: MqServer.AddPartRequest.part:type_name -> MqServer.Partition
	27, // 12: MqServer.AddPartResponse.response:type_name -> MqServer.Response
	25, // 13: MqServer.RemovePartRequest.Cred:type_name -> MqServer.Credentials
	27, // 14: MqServer.RemovePartResponse.response:type_name -> MqServer.Response
	25, // 15: MqServer.SubscribeTopicRequest.CGCred:type_name -> MqServer.Credentials
	27, // 16: MqServer.SubscribeTopicResponse.response:type_name -> MqServer.Response
	25, // 17: MqServer.UnSubscribeTopicRequest.CGCred:type_name -> MqServer.Credentials
	27, // 18: MqServer.UnSubscribeTopicResponse.response:type_name -> MqServer.Response
	27, // 19: MqServer.CheckSourceTermResponse.response:type_name -> MqServer.Response
	53, // 20: MqServer.CheckSourceTermResponse.ConsumersData:type_name -> MqServer.CheckSourceTermResponse.PartsData
	0,  // 21: MqServer.CheckSourceTermResponse.ConsumerGroupOption:type_name -> MqServer.RegisterConsumerGroupRequest.PullOptionMode
	53, // 22: MqServer.CheckSourceTermResponse.TopicData:type_name -> MqServer.CheckSourceTermResponse.PartsData
	25, // 23: MqServer.CheckSourceTermRequest.Self:type_name -> MqServer.Credentials
	55, // 24: MqServer.CheckSourceTermRequest.TopicData:type_name -> MqServer.CheckSourceTermRequest.TopicCheck
	56, // 25: MqServer.CheckSourceTermRequest.ConsumerData:type_name -> MqServer.CheckSourceTermRequest.ConsumerCheck
	25, // 26: MqServer.LeaveConsumerGroupRequest.GroupCred:type_name -> MqServer.Credentials
	25, // 27: MqServer.LeaveConsumerGroupRequest.ConsumerCred:type_name -> MqServer.Credentials
	27, // 28: MqServer.LeaveConsumerGroupResponse.response:type_name -> MqServer.Response
	25, // 29: MqServer.JoinConsumerGroupRequest.Cred:type_name -> MqServer.Credentials
	27, // 30: MqServer.JoinConsumerGroupResponse.response:type_name -> MqServer.Response
	31, // 31: MqServer.JoinConsumerGroupResponse.FcParts:type_name -> MqServer.Partition
	0,  // 32: MqServer.RegisterConsumerGroupRequest.PullOption:type_name -> MqServer.RegisterConsumerGroupRequest.PullOptionMode
	27, // 33: MqServer.RegisterConsumerGroupResponse.response:type_name -> MqServer.Response
	25, // 34: MqServer.RegisterConsumerGroupResponse.Cred:type_name -> MqServer.Credentials
	1,  // 35: MqServer.Credentials.Identity:type_name -> MqServer.Credentials.CredentialsIdentity
	25, // 36: MqServer.MQHeartBeatData.BrokerData:type_name -> MqServer.Credentials
	57, // 37: MqServer.MQHeartBeatData.CheckTopic:type_name -> MqServer.MQHeartBeatData.tpKv
	58, // 38: MqServer.MQHeartBeatData.CheckConsumerGroup:type_name -> MqServer.MQHeartBeatData.cgKv
	2,  // 39: MqServer.Response.mode:type_name -> MqServer.Response.Mode
	31, // 40: MqServer.TpData.Parts:type_name -> MqServer.Partition
	29, // 41: MqServer.Partition.Brokers:type_name -> MqServer.BrokerData
	27, // 42: MqServer.RegisterConsumerResponse.response:type_name -> MqServer.Response
	25, // 43: MqServer.RegisterConsumerResponse.Credential:type_name -> MqServer.Credentials
	27, // 44: MqServer.RegisterProducerResponse.response:type_name -> MqServer.Response
	25, // 45: MqServer.RegisterProducerResponse.Credential:type_name -> MqServer.Credentials
	30, // 46: MqServer.RegisterProducerResponse.tpData:type_name -> MqServer.TpData
	61, // 47: MqServer.CreateTopicRequest.Partition:type_name -> MqServer.CreateTopicRequest.PartitionCreateDetails
	27, // 48: MqServer.CreateTopicResponse.response:type_name -> MqServer.Response
	30, // 49: MqServer.CreateTopicResponse.tp:type_name -> MqServer.TpData
	25, // 50: MqServer.QueryTopicRequest.credential:type_name -> MqServer.Credentials
	27, // 51: MqServer.QueryTopicResponse.response:type_name -> MqServer.Response
	31, // 52: MqServer.QueryTopicResponse.PartitionDetails:type_name -> MqServer.Partition
	25, // 53: MqServer.UnRegisterConsumerRequest.credential:type_name -> MqServer.Credentials
	27, // 54: MqServer.UnRegisterConsumerResponse.response:type_name -> MqServer.Response
	25, // 55: MqServer.UnRegisterProducerRequest.credential:type_name -> MqServer.Credentials
	27, // 56: MqServer.UnRegisterProducerResponse.response:type_name -> MqServer.Response
	25, // 57: MqServer.PushMessageRequest.credential:type_name -> MqServer.Credentials
	43, // 58: MqServer.PushMessageRequest.Msgs:type_name -> MqServer.Message
	27, // 59: MqServer.PushMessageResponse.response:type_name -> MqServer.Response
	25, // 60: MqServer.PullMessageRequest.Group:type_name -> MqServer.Credentials
	25, // 61: MqServer.PullMessageRequest.Self:type_name -> MqServer.Credentials
	27, // 62: MqServer.PullMessageResponse.response:type_name -> MqServer.Response
	43, // 63: MqServer.PullMessageResponse.Msgs:type_name -> MqServer.Message
	50, // 64: MqServer.HeartBeatResponseData.tpKv.TopicTerm:type_name -> MqServer.HeartBeatResponseData.tpKv.TopicTermEntry
	51, // 65: MqServer.HeartBeatResponseData.cgKv.changedGroup:type_name -> MqServer.HeartBeatResponseData.cgKv.ChangedGroupEntry
	54, // 66: MqServer.CheckSourceTermResponse.PartsData.FcParts:type_name -> MqServer.CheckSourceTermResponse.PartsData.Parts
	52, // 67: MqServer.CheckSourceTermResponse.PartsData.FollowerProducerIDs:type_name -> MqServer.CheckSourceTermResponse.IDs
	52, // 68: MqServer.CheckSourceTermResponse.PartsData.FollowerConsumerGroupIDs:type_name -> MqServer.CheckSourceTermResponse.IDs
	31, // 69: MqServer.CheckSourceTermResponse.PartsData.Parts.Part:type_name -> MqServer.Partition
	59, // 70: MqServer.MQHeartBeatData.tpKv.TopicTerm:type_name -> MqServer.MQHeartBeatData.tpKv.TopicTermEntry
	60, // 71: MqServer.MQHeartBeatData.cgKv.ConsumerGroup:type_name -> MqServer.MQHeartBeatData.cgKv.ConsumerGroupEntry
	21, // 72: MqServer.MqServerCall.JoinConsumerGroup:input_type -> MqServer.JoinConsumerGroupRequest
	19, // 73: MqServer.MqServerCall.LeaveConsumerGroup:input_type -> MqServer.LeaveConsumerGroupRequest
	18, // 74: MqServer.MqServerCall.CheckSourceTerm:input_type -> MqServer.CheckSourceTermRequest
	13, // 75: MqServer.MqServerCall.SubscribeTopic:input_type -> MqServer.SubscribeTopicRequest
	15, // 76: MqServer.MqServerCall.UnSubscribeTopic:input_type -> MqServer.UnSubscribeTopicRequest
	23, // 77: MqServer.MqServerCall.RegisterConsumerGroup:input_type -> MqServer.RegisterConsumerGroupRequest
	35, // 78: MqServer.MqServerCall.CreateTopic:input_type -> MqServer.CreateTopicRequest
	37, // 79: MqServer.MqServerCall.QueryTopic:input_type -> MqServer.QueryTopicRequest
	9,  // 80: MqServer.MqServerCall.AddPart:input_type -> MqServer.AddPartRequest
	11, // 81: MqServer.MqServerCall.RemovePart:input_type -> MqServer.RemovePartRequest
	28, // 82: MqServer.MqServerCall.RegisterConsumer:input_type -> MqServer.RegisterConsumerRequest
	33, // 83: MqServer.MqServerCall.RegisterProducer:input_type -> MqServer.RegisterProducerRequest
	39, // 84: MqServer.MqServerCall.UnRegisterConsumer:input_type -> MqServer.UnRegisterConsumerRequest
	41, // 85: MqServer.MqServerCall.UnRegisterProducer:input_type -> MqServer.UnRegisterProducerRequest
	26, // 86: MqServer.MqServerCall.Heartbeat:input_type -> MqServer.MQHeartBeatData
	8,  // 87: MqServer.MqServerCall.ConsumerDisConnect:input_type -> MqServer.DisConnectInfo
	8,  // 88: MqServer.MqServerCall.ProducerDisConnect:input_type -> MqServer.DisConnectInfo
	46, // 89: MqServer.MqServerCall.PullMessage:input_type -> MqServer.PullMessageRequest
	44, // 90: MqServer.MqServerCall.PushMessage:input_type -> MqServer.PushMessageRequest
	46, // 91: MqServer.MqServerCall.PullMessages:input_type -> MqServer.PullMessageRequest
	44, // 92: MqServer.MqServerCall.PushMessages:input_type -> MqServer.PushMessageRequest
	6,  // 93: MqServer.MqServerCall.ConfirmIdentity:input_type -> MqServer.ConfirmIdentityRequest
	3,  // 94: MqServer.MqServerCall.RegisterBroker:input_type -> MqServer.RegisterBrokerRequest
	22, // 95: MqServer.MqServerCall.JoinConsumerGroup:output_type -> MqServer.JoinConsumerGroupResponse
	20, // 96: MqServer.MqServerCall.LeaveConsumerGroup:output_type -> MqServer.LeaveConsumerGroupResponse
	17, // 97: MqServer.MqServerCall.CheckSourceTerm:output_type -> MqServer.CheckSourceTermResponse
	14, // 98: MqServer.MqServerCall.SubscribeTopic:output_type -> MqServer.SubscribeTopicResponse
	16, // 99: MqServer.MqServerCall.UnSubscribeTopic:output_type -> MqServer.UnSubscribeTopicResponse
	24, // 100: MqServer.MqServerCall.RegisterConsumerGroup:output_type -> MqServer.RegisterConsumerGroupResponse
	36, // 101: MqServer.MqServerCall.CreateTopic:output_type -> MqServer.CreateTopicResponse
	38, // 102: MqServer.MqServerCall.QueryTopic:output_type -> MqServer.QueryTopicResponse
	10, // 103: MqServer.MqServerCall.AddPart:output_type -> MqServer.AddPartResponse
	12, // 104: MqServer.MqServerCall.RemovePart:output_type -> MqServer.RemovePartResponse
	32, // 105: MqServer.MqServerCall.RegisterConsumer:output_type -> MqServer.RegisterConsumerResponse
	34, // 106: MqServer.MqServerCall.RegisterProducer:output_type -> MqServer.RegisterProducerResponse
	40, // 107: MqServer.MqServerCall.UnRegisterConsumer:output_type -> MqServer.UnRegisterConsumerResponse
	42, // 108: MqServer.MqServerCall.UnRegisterProducer:output_type -> MqServer.UnRegisterProducerResponse
	5,  // 109: MqServer.MqServerCall.Heartbeat:output_type -> MqServer.HeartBeatResponseData
	27, // 110: MqServer.MqServerCall.ConsumerDisConnect:output_type -> MqServer.Response
	27, // 111: MqServer.MqServerCall.ProducerDisConnect:output_type -> MqServer.Response
	47, // 112: MqServer.MqServerCall.PullMessage:output_type -> MqServer.PullMessageResponse
	45, // 113: MqServer.MqServerCall.PushMessage:output_type -> MqServer.PushMessageResponse
	47, // 114: MqServer.MqServerCall.PullMessages:output_type -> MqServer.PullMessageResponse
	45, // 115: MqServer.MqServerCall.PushMessages:output_type -> MqServer.PushMessageResponse
	7,  // 116: MqServer.MqServerCall.ConfirmIdentity:output_type -> MqServer.ConfirmIdentityResponse
	4,  // 117: MqServer.MqServerCall.RegisterBroker:output_type -> MqServer.RegisterBrokerResponse
	95, // [95:118] is the sub-list for method output_type
	72, // [72:95] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterBrokerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterBrokerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisConnectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQHeartBeatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProducerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterProducerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatResponseDataTpKv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatResponseDataCgKv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermResponse_IDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermResponse_PartsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermResponse_PartsData_Parts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermRequest_TopicCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermRequest_ConsumerCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQHeartBeatDataTpKv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQHeartBeatDataCgKv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest_PartitionCreateDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[53].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
